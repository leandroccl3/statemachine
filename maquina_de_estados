/*

*/

// this constant won't change:
const int button_parada_de_emergencia=xx;
const int button_fin_de_carrera_inferior=xx;
const int button_fin_de_carrera_superior=xx;
const_int button_motor_vel=xx;

// Variables will change:
int parada_de_emergencia=0;
int fin_de_carrera_inferior=0;
int fin_de_carrera_superior=0;
int motor_vel=0;
int INICIO = 0;
int WARMING_UP = 0;
int EXTRUSION = 0;
int STOP = 0;
int FIN = 0;

void setup() {
  // initialize the button pin as a input:
  pinMode(button_parada_de_emergencia, INPUT);
  pinMode(button_fin_de_carrera_inferior, INPUT);
  pinMode(button_fin_de_carrera_superior, INPUT);
  pinMode(button_motor_vel, OUTPUT);

  // initialize serial communication:
  Serial.begin(9600);
}

--Continuar

void loop() {
  // read the pushbutton input pin:
  buttonState = digitalRead(buttonPin);

  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) {
    // if the state has changed, increment the counter
    if (buttonState == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      buttonPushCounter++;
      Serial.println("on");
      Serial.print("number of button pushes: ");
      Serial.println(buttonPushCounter);
    } else {
      // if the current state is LOW then the button went from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
  // save the current state as the last state, for next time through the loop
  lastButtonState = buttonState;


  // turns on the LED every four button pushes by checking the modulo of the
  // button push counter. the modulo function gives you the remainder of the
  // division of two numbers:
  if (buttonPushCounter % 4 == 0) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }

}
